<html>
<head>
    <link href="https://fonts.googleapis.com/css?family=Inconsolata" rel="stylesheet">
    <link href="https://cdn.nmyk.io/assets/style-new.css" rel="stylesheet">
    <link href="https://cdn.nmyk.io/assets/favicon.ico" rel="icon">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="tmpchat is a WebRTC-based group text messaging application designed and built by Nick Mykins (nmyk.io)"/>
    <title>tmpch.at - {{.ChannelName}}</title>
    <script>
        const SEPARATOR = " â€¢ ";

        const SignalingEvent = {
            "ENTRANCE": 1,
            "EXIT": 2,
            "NAME_CHANGE": 3,
            "CLEAR": 4
        };

        const newMessage = (type, text) => {
            return {
                "channel_name": unescape(window.location.pathname.substr(1)),
                "from_user": {"id": myUserId, "name": document.getElementById("myname").value},
                "type": type,
                "text": text
            };
        };

        const nameTag = (message, isFromMe) => {
            let tag = document.createElement("div");
            let name = document.createElement("span");
            name.className = myUserId;
            name.innerHTML = message["from_user"]["name"];
            tag.appendChild(name);
            if (isFromMe) {
                tag.className = "myname";
                tag.innerHTML = SEPARATOR + tag.innerHTML;
            }
            else {
                tag.className = "theirname";
                tag.innerHTML = tag.innerHTML + SEPARATOR;
            }
            return tag;
        };

        const shouldStackMsg = (message, lastMsgElement) => {
            if (message["type"] !== 0 || !lastMsgElement) {
                return false;
            }
            if (lastMsgElement.className === "systemmessage") { // only stack user messages
                return false;
            }
            let lastMsgUserId = lastMsgElement.firstElementChild.firstElementChild.className;
            return message["from_user"]["id"] === lastMsgUserId;
        };

        const doEntrance = message => {
            if (message["from_user"]["id"] !== myUserId) {
                let name = `<span class="${message["from_user"]["id"]}"><pre style="display: inline;">${SEPARATOR}${message["from_user"]["name"]}</pre></span>`;
                document.getElementById("namechanger").innerHTML += name
            }
        };

        const doExit = message => {
            if (message["from_user"]["id"] !== myUserId) {
                document.getElementById("namechanger").getElementsByClassName(message["from_user"]["id"])[0].outerHTML = "";
            }
        };

        const doClear = () => {
            let node = document.getElementById("messagelog");
            while (node.firstChild) {
                node.removeChild(node.firstChild);
            }
            document.getElementById("messagetext").focus();
        };

        const doNameChange = message => {
            let toChange = document.getElementsByClassName(message["from_user"]["id"]);
            for (let i=0; i<toChange.length; i++) {
                toChange[i].innerHTML = message["text"];
            }
        };

        const whoami = () => document.getElementById("myname").value;

        const myUserId = "{{.User.ID}}";

        window.addEventListener("load", function(event) {
            const messageLog = document.getElementById("messagelog");
            const input = document.getElementById("messagetext");

            const announce = message => {
                let announcement = document.createElement("div");
                announcement.className = "systemmessage";
                announcement.innerHTML = message.text;
                messageLog.appendChild(announcement);
            };

            const write = message => {
                const lastMsgElement = messageLog.lastElementChild;
                if (shouldStackMsg(message, lastMsgElement)) {
                    let currentText = lastMsgElement.getElementsByClassName("pre")[0];
                    currentText.textContent = currentText.textContent + "\n" + message["text"];
                } else {
                    let isFromMe = message["from_user"]["id"] === myUserId;
                    let name = nameTag(message, isFromMe);
                    let msg = document.createElement("div");
                    if (isFromMe) {
                        msg.className = "mymessage";
                    } else {
                        msg.className = "theirmessage";
                    }
                    let pre = document.createElement("pre");
                    pre.className = "pre";
                    pre.textContent = message["text"];
                    msg.appendChild(pre);
                    msg.insertAdjacentHTML("afterbegin", name.outerHTML);
                    messageLog.appendChild(msg);
                }
                if (document.activeElement === input) {
                    messageLog.scrollTop = messageLog.scrollHeight;
                }
            };

            let ws = new WebSocket("ws://localhost:7070/");

            ws.onopen = () => {
                let text = `<span class="${myUserId}">${whoami()}</span> joined`;
                ws.send(JSON.stringify(newMessage(SignalingEvent.ENTRANCE, text)));
            };

            window.onbeforeunload = () => {
                let text = `<span class="${myUserId}">${whoami()}</span> left`;
                ws.send(JSON.stringify(newMessage(SignalingEvent.EXIT, text)));
                ws.close();
            };

            ws.onmessage = event => {
                let message = JSON.parse(event.data);
                switch (message.type) {
                    case SignalingEvent.ENTRANCE:
                        doEntrance(message);
                        announce(message);
                        break;
                    case SignalingEvent.EXIT:
                        doExit(message);
                        announce(message);
                        break;
                    case SignalingEvent.NAME_CHANGE:
                        doNameChange(message);
                        break;
                    case SignalingEvent.CLEAR:
                        doClear();
                        break;
                }
            };

            ws.onerror = () => {
                ws.close();
            };

            input.onfocus = () => {
                messageLog.scrollTop = messageLog.scrollHeight;
            };

            let doubleEnterTs; // Clear chat by double-pressing Enter with no text in the input field
            input.onkeypress = event => {
                if(event.key === "Enter" && !event.shiftKey) {
                    if (input.value === "" && (Date.now() - doubleEnterTs < 150)) {
                        document.getElementById("clear").click();
                        return false;
                    }
                    if (input.value === "") {
                        doubleEnterTs = Date.now();
                        return false;
                    }
                    document.getElementById("send").click();
                    return false;
                }
            };

            document.getElementById("send").onclick = () => {
                if (!ws) {
                    return false;
                }
                if (input.value === "") {
                    return false;
                }
                let msg = newMessage(0, input.value);
                write(msg);
                // TODO: send on webRTC data channel
                input.value = "";
                return false;
            };

            document.getElementById("namechanger").onsubmit = () => {
                let message = newMessage(SignalingEvent.NAME_CHANGE, document.getElementById("myname").value);
                if (!ws) {
                    doNameChange(message);
                    return false;
                }
                ws.send(JSON.stringify(message));
                input.focus();
                return false;
            };

            document.getElementById("clear").onclick = () => {
                if (!ws) {
                    doClear();
                    return false;
                }
                ws.send(JSON.stringify(newMessage(SignalingEvent.CLEAR, null)));
                return false;
            };

            input.focus();
        });
    </script>
</head>

<body style="
        -webkit-animation-duration: {{.BgAnimationDuration}}s;
        -moz-animation-duration: {{.BgAnimationDuration}}s;
        animation-duration: {{.BgAnimationDuration}}s;
        animation-delay: {{.BgAnimationDelay}}s;">
<div class="vspace50px"></div>
<a href="http://localhost:8081" type="home">tmpchat</a>
<br>
#{{.ChannelName}}

<div class="container" style="width: 80%;">
    <div class="messagelog" id="messagelog"></div>
    <div style="margin-top: 2px; margin-bottom: 10px;">
        <form id="namechanger" style="width: 85%; float: left;">
            online: <input id="myname" autocomplete="off" type="nametext" size=10 maxlength=16 value="{{.User.Name}}">
        </form>
        <div style="float: right;">
            <input type="submit" id="clear" value="clear">
        </div>
    </div>

    <br><br>

    <form id="message">
        <div class="messagetextcontainer">
            <textarea rows=1 id="messagetext"></textarea>
        </div>

        <div style="float: right;">
            <input type="submit" id="send" value="send">
        </div>
    </form>

    <br>

    <div style="text-align: center;">connected</div>
</div>
</body>

</html>